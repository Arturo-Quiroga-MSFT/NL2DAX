#!/usr/bin/env python3
"""
Power BI REST API Compliance Analysis
Based on official Microsoft documentation
"""

import os
from datetime import datetime

def main():
    print("üìã POWER BI REST API COMPLIANCE ANALYSIS")
    print("=" * 70)
    print(f"üïê Analysis Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üìö Based on: https://learn.microsoft.com/en-us/rest/api/power-bi/")
    print()
    
    workspace_id = "e3fdee99-3aa4-4d71-a530-2964a062e326"  # FIS workspace
    dataset_ids = [
        "3ed8f6b3-0a1d-4910-9d31-a9dd3f8f4007",  # FIS-SEMANTIC-MODEL
        "fc4d80c8-090e-4441-8336-217490bde820"   # AdventureWorks
    ]
    
    print("üîç CURRENT CONFIGURATION")
    print("-" * 40)
    print(f"üìÅ Workspace ID: {workspace_id}")
    print(f"üìä Dataset Count: {len(dataset_ids)}")
    print("üè≠ Context: Datasets in specific workspace (not 'My workspace')")
    print()
    
    print("üìñ MICROSOFT DOCUMENTATION FINDINGS")
    print("-" * 50)
    print()
    
    print("üéØ CORRECT ENDPOINT SELECTION:")
    print("According to Microsoft documentation, there are TWO endpoints:")
    print()
    print("1Ô∏è‚É£ MY WORKSPACE (Personal workspace):")
    print("   URL: POST /v1.0/myorg/datasets/{datasetId}/executeQueries")
    print("   Use Case: Datasets in user's personal workspace")
    print("   Requirements: Dataset read and build permissions")
    print()
    print("2Ô∏è‚É£ OTHER WORKSPACES (Shared workspaces):")
    print("   URL: POST /v1.0/myorg/groups/{groupId}/datasets/{datasetId}/executeQueries")
    print("   Use Case: Datasets in shared/organizational workspaces")
    print("   Requirements: Workspace access + dataset read and build permissions")
    print()
    
    print("üéØ OUR SITUATION:")
    print(f"   ‚Ä¢ We have datasets in workspace: {workspace_id}")
    print("   ‚Ä¢ This is NOT 'My workspace' (personal workspace)")
    print("   ‚Ä¢ Therefore, we should use the GROUP-BASED endpoint")
    print()
    
    print("‚úÖ REQUIRED ENDPOINT FOR OUR USE CASE:")
    print("   POST https://api.powerbi.com/v1.0/myorg/groups/{groupId}/datasets/{datasetId}/executeQueries")
    print()
    print("   Where:")
    print(f"   ‚Ä¢ groupId = {workspace_id}")
    print("   ‚Ä¢ datasetId = [one of our dataset IDs]")
    print()
    
    print("üìã AUTHENTICATION REQUIREMENTS")
    print("-" * 40)
    print("‚úÖ Service Principal Setup (our approach):")
    print("   ‚Ä¢ Azure AD app registration ‚úÖ")
    print("   ‚Ä¢ Client credentials flow ‚úÖ")
    print("   ‚Ä¢ Scope: https://analysis.windows.net/powerbi/api/.default ‚úÖ")
    print()
    print("üìä Required Permissions:")
    print("   ‚Ä¢ Dataset.ReadWrite.All OR Dataset.Read.All")
    print("   ‚Ä¢ Workspace access (Member/Admin/Contributor)")
    print("   ‚Ä¢ Dataset read and build permissions")
    print()
    
    print("üè¢ TENANT REQUIREMENTS")
    print("-" * 30)
    print("‚úÖ Admin Settings Required:")
    print("   1. 'Dataset Execute Queries REST API' = ENABLED")
    print("      Location: Admin Portal > Tenant Settings > Integration settings")
    print()
    print("   2. 'Allow service principals to use Power BI APIs' = ENABLED")
    print("      Location: Admin Portal > Tenant Settings > Developer settings")
    print()
    print("   3. Service Principal added to security group (if restricted)")
    print()
    
    print("‚ö†Ô∏è  LIMITATIONS & CONSTRAINTS")
    print("-" * 35)
    print("üìä Query Limits:")
    print("   ‚Ä¢ One query per API call")
    print("   ‚Ä¢ One table request per query")
    print("   ‚Ä¢ Maximum 100,000 rows OR 1,000,000 values (whichever first)")
    print("   ‚Ä¢ Maximum 15MB of data per query")
    print("   ‚Ä¢ 120 query requests per minute per user")
    print()
    print("üö´ Unsupported Scenarios:")
    print("   ‚Ä¢ Azure Analysis Services hosted datasets")
    print("   ‚Ä¢ Live connection to on-premises Azure Analysis Services")
    print("   ‚Ä¢ Service principals with RLS-enabled datasets")
    print("   ‚Ä¢ Service principals with SSO-enabled datasets")
    print("   ‚Ä¢ MDX queries (only DAX supported)")
    print()
    
    print("üîß RECOMMENDED CORRECTIONS")
    print("-" * 35)
    print("Based on the official documentation, we should:")
    print()
    print("1Ô∏è‚É£ ENDPOINT CORRECTION:")
    print("   Current: /v1.0/myorg/datasets/{datasetId}/executeQueries")
    print("   Should be: /v1.0/myorg/groups/{groupId}/datasets/{datasetId}/executeQueries")
    print("   Reason: Our datasets are in a shared workspace, not 'My workspace'")
    print()
    print("2Ô∏è‚É£ PERMISSION VERIFICATION:")
    print("   ‚Ä¢ Verify service principal has workspace access")
    print("   ‚Ä¢ Verify dataset-level 'read and build' permissions")
    print("   ‚Ä¢ Check if RLS or SSO is enabled (not supported with service principals)")
    print()
    print("3Ô∏è‚É£ TENANT SETTING VERIFICATION:")
    print("   ‚Ä¢ Confirm 'Dataset Execute Queries REST API' is enabled")
    print("   ‚Ä¢ Confirm service principal is in allowed security group")
    print()
    
    print("üìã TESTING STRATEGY")
    print("-" * 25)
    print("Test both endpoints to compare:")
    print()
    print("üß™ Test A - Direct Dataset Access:")
    print("   URL: /v1.0/myorg/datasets/{datasetId}/executeQueries")
    print("   Expected: Should fail if dataset not in 'My workspace'")
    print()
    print("üß™ Test B - Workspace Dataset Access:")
    print("   URL: /v1.0/myorg/groups/{groupId}/datasets/{datasetId}/executeQueries")
    print("   Expected: Should work if permissions are correct")
    print()
    
    print("üí° EXAMPLE CORRECT REQUEST")
    print("-" * 35)
    print("POST https://api.powerbi.com/v1.0/myorg/groups/e3fdee99-3aa4-4d71-a530-2964a062e326/datasets/3ed8f6b3-0a1d-4910-9d31-a9dd3f8f4007/executeQueries")
    print()
    print("Headers:")
    print("  Authorization: Bearer {token}")
    print("  Content-Type: application/json")
    print()
    print("Body:")
    print('{')
    print('  "queries": [')
    print('    {"query": "EVALUATE { 1 }"}')
    print('  ],')
    print('  "serializerSettings": {')
    print('    "includeNulls": true')
    print('  }')
    print('}')
    print()
    
    print("üìû NEXT ACTIONS")
    print("-" * 20)
    print("1. ‚úÖ Update scripts to use group-based endpoint")
    print("2. üîç Test both endpoints for comparison")
    print("3. üìã Document endpoint behavior differences")
    print("4. üîß Create endpoint selection logic based on workspace context")
    print()
    
    print(f"‚è∞ Analysis completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
