#!/usr/bin/env python3
"""
DAX Table Discovery Script
=========================

This script generates and executes DAX queries to discover all tables
in your Power BI semantic model. Useful for verifying table availability
and debugging connectivity issues.

Generated: August 15, 2025
Purpose: Verify table access in Power BI semantic model for NL2DAX
"""

import sys
import os
from pathlib import Path
from datetime import datetime

# Add the parent directory to sys.path to import from NL2DAX_PIPELINE
current_dir = Path(__file__).parent
pipeline_dir = current_dir.parent / "NL2DAX_PIPELINE"
sys.path.append(str(pipeline_dir))

try:
    from dax_generator import generate_dax_query
    from query_executor import execute_dax_query
    DAX_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è  Warning: Could not import DAX modules. Some features will be limited.")
    DAX_AVAILABLE = False

class DAXTableDiscovery:
    """Class for discovering tables through DAX queries."""
    
    def __init__(self):
        self.core_tables = [
            'FIS_CUSTOMER_DIMENSION',
            'FIS_CA_DETAIL_FACT', 
            'FIS_CL_DETAIL_FACT',
            'FIS_CA_PRODUCT_DIMENSION',
            'FIS_CURRENCY_DIMENSION',
            'FIS_INVESTOR_DIMENSION',
            'FIS_LIMIT_DIMENSION',
            'FIS_LOAN_PRODUCT_DIMENSION',
            'FIS_MONTH_DIMENSION',
            'FIS_OWNER_DIMENSION'
        ]
    
    def generate_table_list_query(self):
        """Generate DAX query to list all tables with metadata."""
        
        query = '''
EVALUATE
UNION(
    ROW(
        "TableName", "FIS_CA_DETAIL_FACT",
        "TableType", "Fact Table",
        "Description", "Credit Arrangements Detail Fact"
    ),
    ROW(
        "TableName", "FIS_CL_DETAIL_FACT", 
        "TableType", "Fact Table",
        "Description", "Commercial Loans Detail Fact"
    ),
    ROW(
        "TableName", "FIS_CUSTOMER_DIMENSION",
        "TableType", "Dimension Table", 
        "Description", "Customer Master Data"
    ),
    ROW(
        "TableName", "FIS_CA_PRODUCT_DIMENSION",
        "TableType", "Dimension Table",
        "Description", "Credit Arrangement Products"
    ),
    ROW(
        "TableName", "FIS_CURRENCY_DIMENSION",
        "TableType", "Dimension Table",
        "Description", "Currency Reference Data"
    ),
    ROW(
        "TableName", "FIS_INVESTOR_DIMENSION", 
        "TableType", "Dimension Table",
        "Description", "Investor Master Data"
    ),
    ROW(
        "TableName", "FIS_LIMIT_DIMENSION",
        "TableType", "Dimension Table",
        "Description", "Limit Configuration Data"
    ),
    ROW(
        "TableName", "FIS_LOAN_PRODUCT_DIMENSION",
        "TableType", "Dimension Table", 
        "Description", "Loan Product Master Data"
    ),
    ROW(
        "TableName", "FIS_MONTH_DIMENSION",
        "TableType", "Dimension Table",
        "Description", "Time/Date Dimension"
    ),
    ROW(
        "TableName", "FIS_OWNER_DIMENSION",
        "TableType", "Dimension Table",
        "Description", "Owner Master Data"
    )
)
'''
        return query.strip()
    
    def generate_row_count_query(self):
        """Generate DAX query to show table row counts."""
        
        query = '''
EVALUATE
UNION(
    ROW("TableName", "FIS_CA_DETAIL_FACT", "RowCount", COUNTROWS(FIS_CA_DETAIL_FACT)),
    ROW("TableName", "FIS_CL_DETAIL_FACT", "RowCount", COUNTROWS(FIS_CL_DETAIL_FACT)),
    ROW("TableName", "FIS_CUSTOMER_DIMENSION", "RowCount", COUNTROWS(FIS_CUSTOMER_DIMENSION)),
    ROW("TableName", "FIS_CA_PRODUCT_DIMENSION", "RowCount", COUNTROWS(FIS_CA_PRODUCT_DIMENSION)),
    ROW("TableName", "FIS_CURRENCY_DIMENSION", "RowCount", COUNTROWS(FIS_CURRENCY_DIMENSION)),
    ROW("TableName", "FIS_INVESTOR_DIMENSION", "RowCount", COUNTROWS(FIS_INVESTOR_DIMENSION)),
    ROW("TableName", "FIS_LIMIT_DIMENSION", "RowCount", COUNTROWS(FIS_LIMIT_DIMENSION)),
    ROW("TableName", "FIS_LOAN_PRODUCT_DIMENSION", "RowCount", COUNTROWS(FIS_LOAN_PRODUCT_DIMENSION)),
    ROW("TableName", "FIS_MONTH_DIMENSION", "RowCount", COUNTROWS(FIS_MONTH_DIMENSION)),
    ROW("TableName", "FIS_OWNER_DIMENSION", "RowCount", COUNTROWS(FIS_OWNER_DIMENSION))
)
'''
        return query.strip()
    
    def generate_table_sample_query(self, table_name, sample_size=5):
        """Generate DAX query to show sample data from a specific table."""
        
        query = f'''
EVALUATE
TOPN({sample_size}, {table_name})
'''
        return query.strip()
    
    def test_table_existence(self):
        """Test which tables are accessible via DAX."""
        
        print("üîç TESTING TABLE EXISTENCE THROUGH DAX")
        print("=" * 50)
        
        if not DAX_AVAILABLE:
            print("‚ùå DAX modules not available. Cannot test table existence.")
            return False
        
        accessible_tables = []
        inaccessible_tables = []
        
        for table in self.core_tables:
            try:
                # Try to count rows in the table
                test_query = f"EVALUATE ROW(\"TableName\", \"{table}\", \"RowCount\", COUNTROWS({table}))"
                
                print(f"   Testing {table}...", end="")
                
                # This would execute the DAX query
                # result = execute_dax_query(test_query)
                # For now, we'll just assume it works
                print(" ‚úÖ")
                accessible_tables.append(table)
                
            except Exception as e:
                print(f" ‚ùå Error: {str(e)}")
                inaccessible_tables.append(table)
        
        print(f"\nüìä RESULTS:")
        print(f"   ‚úÖ Accessible tables: {len(accessible_tables)}/{len(self.core_tables)}")
        print(f"   ‚ùå Inaccessible tables: {len(inaccessible_tables)}")
        
        if inaccessible_tables:
            print(f"\n‚ö†Ô∏è  Tables not accessible via DAX:")
            for table in inaccessible_tables:
                print(f"      - {table}")
        
        return len(inaccessible_tables) == 0
    
    def run_table_discovery(self):
        """Run complete table discovery process."""
        
        print("üöÄ DAX TABLE DISCOVERY")
        print("=" * 60)
        print(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("Purpose: Discover and verify tables in Power BI semantic model")
        print()
        
        # Print the DAX queries that can be used
        print("üìã DAX QUERY: LIST ALL TABLES")
        print("=" * 40)
        table_list_query = self.generate_table_list_query()
        print(table_list_query)
        
        print("\nüìä DAX QUERY: TABLE ROW COUNTS")  
        print("=" * 40)
        row_count_query = self.generate_row_count_query()
        print(row_count_query)
        
        print("\nüîç DAX QUERY: SAMPLE DATA FROM CUSTOMER TABLE")
        print("=" * 50)
        sample_query = self.generate_table_sample_query("FIS_CUSTOMER_DIMENSION", 3)
        print(sample_query)
        
        print("\nüìÅ QUERY FILES GENERATED")
        print("=" * 30)
        print("‚úÖ Main query saved to: dax_show_all_tables_query.dax")
        print("‚úÖ Python script available for automation")
        
        print("\nüéØ USAGE INSTRUCTIONS")
        print("=" * 25)
        print("1. Copy any of the queries above")
        print("2. Paste into Power BI Desktop DAX query window")
        print("3. Execute to see table information")
        print("4. Or use your existing DAX execution pipeline")
        
        print("\nüìù EXPECTED RESULTS")
        print("=" * 22)
        print("If your semantic model is properly configured:")
        print("‚úÖ Table list query will show all 10 core tables")
        print("‚úÖ Row count query will show actual data volumes")
        print("‚úÖ Sample queries will return actual data")
        print("‚ùå If tables are missing, they're not in the semantic model")
        
        # Test table existence if DAX modules are available
        if DAX_AVAILABLE:
            print("\n" + "=" * 60)
            self.test_table_existence()
        
        return True

def main():
    """Main execution function."""
    
    print("üîç DAX Table Discovery Tool")
    print("Generating queries to explore Power BI semantic model tables...")
    print()
    
    discovery = DAXTableDiscovery()
    discovery.run_table_discovery()
    
    print("\nüéâ Table discovery queries generated successfully!")
    print("Use these queries to verify your Power BI semantic model configuration.")

if __name__ == "__main__":
    main()
