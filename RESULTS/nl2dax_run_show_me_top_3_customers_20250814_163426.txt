
========== NATURAL LANGUAGE QUERY ==========
show me top 3 customers

========== GENERATED SQL ==========
SELECT TOP (3)
    c.CUSTOMER_ID,
    c.CUSTOMER_NAME,
    SUM(f.CURRENT_PRINCIPAL_BALANCE) AS TOTAL_PRINCIPAL_BALANCE
FROM FIS_CL_DETAIL_FACT AS f
INNER JOIN FIS_CUSTOMER_DIMENSION AS c
    ON f.CUSTOMER_KEY = c.CUSTOMER_KEY
GROUP BY
    c.CUSTOMER_ID,
    c.CUSTOMER_NAME
ORDER BY
    TOTAL_PRINCIPAL_BALANCE DESC;

========== SQL QUERY RESULTS (TABLE) ==========
CUSTOMER_ID | CUSTOMER_NAME             | TOTAL_PRINCIPAL_BALANCE
------------+---------------------------+------------------------
CUST001     | Desert Manufacturing LLC  | 3750000.00             
CUST003     | Southwest Energy Partners | 2625000.00             
CUST002     | Palm Investors Inc.       | 1875000.00             

========== GENERATED DAX ==========
Here’s one way to pull the top 3 customers by their total outstanding loan balance, strictly following your “EVALUATE / SELECTCOLUMNS” pattern and naming conventions:

EVALUATE  
SELECTCOLUMNS(  
    TOPN(  
        3,  
        SUMMARIZE(  
            'FIS_CUSTOMER_DIMENSION',  
            'FIS_CUSTOMER_DIMENSION'[CUSTOMER_ID],  
            'FIS_CUSTOMER_DIMENSION'[CUSTOMER_NAME],  
            "TotalOutstandingBalance",  
                CALCULATE( SUM( 'FIS_CL_DETAIL_FACT'[OUTSTANDING_BALANCE] ) )  
        ),  
        [TotalOutstandingBalance], DESC  
    ),  
    "CustomerID",               [CUSTOMER_ID],  
    "CustomerName",             [CUSTOMER_NAME],  
    "TotalOutstandingBalance",  [TotalOutstandingBalance]  
)  

Explanation of the pieces:

1. SUMMARIZE(…)  
   – Groups by each customer’s ID and Name.  
   – Adds a calculated column “TotalOutstandingBalance” = the sum of OUTSTANDING_BALANCE for that customer.  

2. TOPN(3, …, [TotalOutstandingBalance], DESC)  
   – From that summarized table, takes the top 3 rows by descending total outstanding balance.  

3. SELECTCOLUMNS(…)  
   – Projects just the three explicit columns you care about and gives them the clean aliases:  
     • CustomerID  
     • CustomerName  
     • TotalOutstandingBalance

========== FORMATTED DAX ==========
Here’s one way to pull the top 3 customers by their total outstanding loan balance, strictly following your “EVALUATE / SELECTCOLUMNS” pattern and naming conventions:

EVALUATE  
SELECTCOLUMNS(  
    TOPN(  
        3,  
        SUMMARIZE(  
            'FIS_CUSTOMER_DIMENSION',  
            'FIS_CUSTOMER_DIMENSION'[CUSTOMER_ID],  
            'FIS_CUSTOMER_DIMENSION'[CUSTOMER_NAME],  
            "TotalOutstandingBalance",  
                CALCULATE( SUM( 'FIS_CL_DETAIL_FACT'[OUTSTANDING_BALANCE] ) )  
        ),  
        [TotalOutstandingBalance], DESC  
    ),  
    "CustomerID",               [CUSTOMER_ID],  
    "CustomerName",             [CUSTOMER_NAME],  
    "TotalOutstandingBalance",  [TotalOutstandingBalance]  
)  

Explanation of the pieces:

1. SUMMARIZE(…)  
   – Groups by each customer’s ID and Name.  
   – Adds a calculated column “TotalOutstandingBalance” = the sum of OUTSTANDING_BALANCE for that customer.  

2. TOPN(3, …, [TotalOutstandingBalance], DESC)  
   – From that summarized table, takes the top 3 rows by descending total outstanding balance.  

3. SELECTCOLUMNS(…)  
   – Projects just the three explicit columns you care about and gives them the clean aliases:  
     • CustomerID  
     • CustomerName  
     • TotalOutstandingBalance

========== DAX EXECUTION WARNING ==========
[WARN] Skipping DAX execution: DAX over HTTP/XMLA failed. Check PBI_* env vars, XMLA endpoint, dataset name, and permissions. Root error: Power BI Execute Queries API failed with HTTP 400. Error details: {"error":{"code":"DatasetExecuteQueriesError","pbi.error":{"code":"DatasetExecuteQueriesError","parameters":{},"details":[{"code":"DetailsMessage","detail":{"type":1,"value":"Query (1, 5) The following syntax error occurred during parsing: Invalid token, Line 1, Offset 5, ’."}},{"code":"AnalysisServicesErrorCode","detail":{"type":1,"value":"3238920239"}}]}}}

========== RUN DURATION ==========
Run duration: 79.16 seconds
